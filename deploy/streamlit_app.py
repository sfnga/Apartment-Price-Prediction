import streamlit as st
import numpy as np
import pandas as pd
import pickle
import joblib
import sklearn
from geopy.geocoders import Nominatim, Yandex
geolocator = Yandex(api_key='a3b68fa7-5deb-4262-aaf2-da0d88b205f5')
inv_geolocator = Nominatim(user_agent='sanek052002@gmail.com')


MIN_SQUARE_BY_ROOMS = {
    '—Å—Ç—É–¥–∏—è': 10.0,
    '1': 15.0,
    '2': 26.0,
    '3': 41.5,
    '4': 45.0,
    '5': 80.0,
    '6': 99.5,
    '7': 160.0,
    '8': 211.0,
    '9': 173.7,
    '10 –∏ –±–æ–ª—å—à–µ': 332.6,
    '—Å–≤–æ–±–æ–¥–Ω–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞': 19.6}

FEATURES = ['–†–∞–π–æ–Ω', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–Ω–∞—Ç', '–û–±—â–∞—è_–ø–ª–æ—â–∞–¥—å', '–†–µ–º–æ–Ω—Ç', '–≠—Ç–∞–∂', '–≠—Ç–∞–∂–µ–π_–≤_–¥–æ–º–µ', '–¢–∏–ø_–¥–æ–º–∞',
            '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–¥–æ_–ö—Ä–∞—Å–Ω–æ–ø—Ä–µ—Å–Ω–µ–Ω—Å–∫–∞—è', '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã_–∫–ª–∞—Å—Ç–µ—Ä', '–ú–µ—Ç—Ä–æ_1', '–ú–µ—Ç—Ä–æ_2', '–ú–µ—Ç—Ä–æ_3', '–û–±—â–∞—è_–ø–ª–æ—â–∞–¥—å_–º–∏–Ω—É—Å_–º–∏–Ω',
            '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–¥–æ_–ö—Ä–µ–º–ª—è', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–¥–æ_–ö–∏–µ–≤—Å–∫–∞—è'
            ]


@st.cache_resource
def pickle_load(path):
    with open(path, "rb") as f:
        model = pickle.load(f)
    return model


@st.cache_resource
def joblib_load(path):
    model = joblib.load(path)
    return model


@st.cache_resource
def csv_load(path):
    data = pd.read_csv(path)
    return data


def haversine_distance(lat1, lng1, lat2, lng2):
    """
    –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ –ø–æ –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    ----------
    lat1 - —à–∏—Ä–æ—Ç–∞ 1 –æ–±—ä–µ–∫—Ç–∞
    lng1 - –¥–æ–ª–≥–æ—Ç–∞ 1 –æ–±—ä–µ–∫—Ç–∞
    lat2 - —à–∏—Ä–æ—Ç–∞ 2 –æ–±—ä–µ–∫—Ç–∞
    lng2 - –¥–æ–ª–≥–æ—Ç–∞ 2 –æ–±—ä–µ–∫—Ç–∞
    """
    lat1, lng1, lat2, lng2 = map(np.radians, (lat1, lng1, lat2, lng2))
    AVG_EARTH_RADIUS = 6371
    lat = lat2 - lat1
    lng = lng2 - lng1
    d = np.sin(
        lat * 0.5)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(lng * 0.5)**2
    h = 2 * AVG_EARTH_RADIUS * np.arcsin(np.sqrt(d))
    return h


def accept_user_data():
    address = st.text_input('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã',
                            '–ú–æ—Å–∫–≤–∞ —É–ª–∏—Ü–∞ –¢–≤–µ—Ä—Å–∫–∞—è 18 –∫1')
    try:
        location = geolocator.geocode(address)
        st.write('–í–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: ', location)
        uburb = address
        lat = location.latitude
        lng = location.longitude
        inv_location = inv_geolocator.reverse((lat, lng), exactly_one=True)
        new_address = inv_location.raw['address']
        suburb = new_address.get('suburb', None)
        if suburb:
            suburb = suburb.replace('—Ä–∞–π–æ–Ω', '').strip()
    except:
        st.error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')

    n_rooms = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç', ('—Å—Ç—É–¥–∏—è', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10 –∏ –±–æ–ª—å—à–µ',
                                                          '—Å–≤–æ–±–æ–¥–Ω–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞'))

    square = st.number_input('–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã', min_value=8.00)

    repair = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–º–æ–Ω—Ç–∞', ('–∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π',
                          '–µ–≤—Ä–æ', '—Ç—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞', '–¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–π'))

    floor = st.select_slider('–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂', range(1, 100))

    n_floors = st.select_slider(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ', range(1, 100))

    house_type = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–º–∞', ('–ø–∞–Ω–µ–ª—å–Ω—ã–π',
                              '–º–æ–Ω–æ–ª–∏—Ç–Ω—ã–π', '–∫–∏—Ä–ø–∏—á–Ω—ã–π', '–º–æ–Ω–æ–ª–∏—Ç–Ω–æ-–∫–∏—Ä–ø–∏—á–Ω—ã–π', '–±–ª–æ—á–Ω—ã–π'))

    return suburb, n_rooms, square, repair, floor, n_floors, house_type, lat, lng


def prepare_features():
    suburb, n_rooms, square, repair, floor, n_floors, house_type, lat, lng = accept_user_data()
    kmeans_geo = pickle_load("deploy/geo_cluster.pkl")
    stations_encoder = pickle_load("deploy/metro_stations.pkl")
    categorical_encoder = joblib_load("deploy/categorical_encoder.pkl")
    metros = csv_load("deploy/metro_coords.csv")

    dist_krasn = haversine_distance(lat, lng, 55.760378, 37.577114)
    dist_kievskaya = haversine_distance(lat, lng, 55.743117, 37.564132)
    dist_kremlin = haversine_distance(lat, lng, 55.751999, 37.617734)
    coords_cluster = kmeans_geo.predict([[lat, lng]]).item()
    metros['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ'] = haversine_distance(
        lat, lng, metros['–®–∏—Ä–æ—Ç–∞'], metros['–î–æ–ª–≥–æ—Ç–∞'])
    metro_1, metro_2, metro_3 = metros.sort_values(
        by='–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ').head(3)['–°—Ç–∞–Ω—Ü–∏—è']

    square_munus_min = square-MIN_SQUARE_BY_ROOMS[n_rooms]
    values = [suburb, n_rooms, square, repair, float(floor), float(n_floors), house_type, dist_krasn,
              float(coords_cluster), metro_1, metro_2, metro_3, square_munus_min, dist_kremlin, dist_kievskaya]
    df = pd.DataFrame(columns=FEATURES)
    df = pd.concat([df, pd.DataFrame(data = values, columns = FEATURES)], ignore_index=True)
    for i in range(1, 4):
        df[f'–ú–µ—Ç—Ä–æ_{i}'] = stations_encoder.get(df[f'–ú–µ—Ç—Ä–æ_{i}'].item(), -1)
    df[['–†–∞–π–æ–Ω', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–Ω–∞—Ç', '–†–µ–º–æ–Ω—Ç', '–¢–∏–ø_–¥–æ–º–∞']] = categorical_encoder.transform(
        df[['–†–∞–π–æ–Ω', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–Ω–∞—Ç', '–†–µ–º–æ–Ω—Ç', '–¢–∏–ø_–¥–æ–º–∞']])

    return df, square


def predict():
    data, square = prepare_features()
    predictions = 0
    for fold in range(5):
        model = joblib_load(f'deploy/lgb_model_{fold}')
        predictions += model.predict(data)/5

    square_price = int(predictions)//1000
    last_digit = str(predictions)[-1]
    if last_digit == '0':
        value = '—Ç—ã—Å—è—á'
    elif last_digit == '1':
        value = '—Ç—ã—Å—è—á–∞'
    elif last_digit in ['2', '3', '4']:
        value = '—Ç—ã—Å—è—á–∏'
    else:
        value = '—Ç—ã—Å—è—á'

    price = float((predictions*square)/1e6)

    if st.button('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É'):
        st.success(
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–∞: {square_price} {value} —Ä—É–±–ª–µ–π")
        st.success(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price:.3f} –º–ª–Ω. —Ä—É–±–ª–µ–π")


def main():
    st.title('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –≤—Ç–æ—Ä–∏—á–Ω–æ–µ –∂–∏–ª—å—ë –≤ –ú–æ—Å–∫–≤–µ üè†')
    st.markdown("""
    * –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–Ω–æ–π —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ —Ä—ã–Ω–∫–µ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –∂–∏–ª—å—è –≤ –ú–æ—Å–∫–≤–µ
    * [Github —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π](https://github.com/sfnga/Apartment-Price-Prediction)
    """)
    predict()


main()
